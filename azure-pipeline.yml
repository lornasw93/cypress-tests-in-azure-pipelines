trigger:
- master

variables:
  CypressFolderPath: '/home/vsts/work/1/s/cypress'

jobs:
- job: Job_1
  displayName: Pre-requisites
  steps:
  - checkout: self
  - task: DeleteFiles@1
    displayName: Delete old results
    inputs:
      SourceFolder: $(System.DefaultWorkingDirectory)/cypress/results/
      Contents: '*.*'
  - task: Npm@1
    displayName: npm ci
    inputs:
      verbose: false
  - task: CmdLine@2
    displayName: Check Cypress Installed
    inputs:
      script: >
        npx cypress verify


- job: Job_2
  dependsOn: Job_1
  condition: succeeded()
  displayName: Run Cypress tests
  steps:
  - checkout: none
  - task: CmdLine@2
    displayName: Run-Tests
    continueOnError: True
    inputs:
      script: |
        npm install -g wait-on
        npm run start:e2e & wait-on http://localhost:4173 & npm run cy:run-junit-reporter:e2e
      workingDirectory: $(System.DefaultWorkingDirectory)
  - task: PublishTestResults@2
    displayName: Publish JUnit Test Results
    condition: succeededOrFailed()
    inputs:
      testResultsFormat: 'JUnit'
      testResultsFiles: '$(CypressFolderPath)/results/result-*.xml'
      mergeTestResults: true
      testRunTitle: Cypress Test Results
      searchFolder: '$(System.DefaultWorkingDirectory)'


- job: Job_3
  dependsOn: Job_2
  condition: eq(dependencies.Job_2.result,'SucceededWithIssues')
  displayName: Publish-Screens-on-Fail
  steps:
  - checkout: none
  - task: PublishBuildArtifacts@1
    displayName: 'Publish Artifact: screenshots'
    condition: succeededOrFailed()
    continueOnError: True
    inputs:
      PathtoPublish: '$(System.DefaultWorkingDirectory)/cypress/screenshots'
      ArtifactName: screenshots
  - task: PublishBuildArtifacts@1
    displayName: 'Publish Artifact: videos'
    condition: succeededOrFailed()
    continueOnError: True
    inputs:
      PathtoPublish: '$(System.DefaultWorkingDirectory)/cypress/videos'
      ArtifactName: video