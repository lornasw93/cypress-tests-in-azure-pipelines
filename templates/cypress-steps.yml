parameters:
  - name: baseUrl
    default: ""
  - name: vmImage
    default: ""

jobs:
  - job: CypressPrerequisites
    pool:
      vmImage: ${{ parameters.vmImage }}
    steps:
      - task: NodeTool@0
        inputs:
          versionSpec: "18.x"
        displayName: "Install Node.js"

      - script: npm ci
        displayName: "Install NPM dependencies"

      - script: npm run cy:verify
        displayName: "Verify Cypress is installed"

      # Need to ensure server is running before running tests and generating a report
      - script: |
          npm install -g wait-on
        continueOnError: False
        displayName: "Install wait-on package"


  - job: CypressE2ETests
    steps:
      # Ensure server is running before running tests and generating a report
      - script: |
          npm run start:e2e & wait-on ${{parameters.baseUrl}} & npm run cy:run-junit-reporter:e2e
        continueOnError: True
        displayName: "Run e2e tests"

      # Generate XML reports for each spec file
      - task: PublishTestResults@2
        displayName: "Publish e2e test results"
        inputs:
          testResultsFormat: "JUnit"
          testResultsFiles: "/home/vsts/work/1/s/cypress/results/e2e/result-*.xml"
          testRunTitle: "CypressE2ETests"
          searchFolder: "$(System.DefaultWorkingDirectory)"
          mergeTestResults: true

      # Publish video artifacts when tests have failed
      - task: PublishBuildArtifacts@1
        displayName: "Publish e2e screenshots"
        condition: failed()
        continueOnError: True
        inputs:
          PathtoPublish: "/home/vsts/work/1/s/cypress/screenshots/e2e"
          ArtifactName: screenshots

      # Publish video artifacts when tests have succeeded or failed
      - task: PublishBuildArtifacts@1
        displayName: "Publish e2e videos"
        continueOnError: True
        inputs:
          PathtoPublish: "/home/vsts/work/1/s/cypress/videos/e2e"
          ArtifactName: videos


  - job: CypressComponentTests
    steps:
      # Ensure server is running before running tests and generating a report
      - script: |
          npm run start:e2e & wait-on ${{parameters.baseUrl}} & npm run cy:run-junit-reporter:component
        continueOnError: True
        displayName: "Run component tests"

      # Generate XML reports for each spec file
      - task: PublishTestResults@2
        displayName: "Publish component test results"
        inputs:
          testResultsFormat: "JUnit"
          testResultsFiles: "/home/vsts/work/1/s/cypress/results/component/result-*.xml"
          testRunTitle: "CypressComponentTests"
          searchFolder: "$(System.DefaultWorkingDirectory)"
          mergeTestResults: true

      # Publish video artifacts when tests have failed
      - task: PublishBuildArtifacts@1
        displayName: "Publish component screenshots"
        condition: failed()
        continueOnError: True
        inputs:
          PathtoPublish: "/home/vsts/work/1/s/cypress/screenshots/component"
          ArtifactName: screenshots

      # Publish video artifacts when tests have succeeded or failed
      - task: PublishBuildArtifacts@1
        displayName: "Publish component videos"
        continueOnError: True
        inputs:
          PathtoPublish: "/home/vsts/work/1/s/cypress/videos/component"
          ArtifactName: videos


  # - job: CypressCodeCoverage
  #   steps:
  #     - script: |
  #         npx nyc report --reporter=text-summary --report-dir=/home/vsts/work/1/s/coverage
  #       continueOnError: True
  #       displayName: "Run code coverage tests"

  #     - task: PublishCodeCoverageResults@1
  #       displayName: 'Publish code coverage results'
  #       condition: succeededOrFailed()
  #       inputs:
  #         codeCoverageTool: Cobertura
  #         summaryFileLocation: '**/coverage/coverage.xml'
  #         failIfCoverageEmpty: true